name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: '8.x'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'pnpm'
        cache-dependency-path: 'shadcn-ui/pnpm-lock.yaml'

    - name: Install frontend dependencies
      working-directory: ./shadcn-ui
      run: pnpm install --frozen-lockfile

    - name: Install backend dependencies
      working-directory: ./shadcn-ui/backend
      run: npm ci

    - name: TypeScript type checking (Frontend)
      working-directory: ./shadcn-ui
      run: pnpm tsc --noEmit

    - name: Run ESLint (Frontend)
      working-directory: ./shadcn-ui
      run: pnpm lint

    - name: Run tests (Frontend)
      working-directory: ./shadcn-ui
      run: pnpm test --if-present

    - name: Build React application
      working-directory: ./shadcn-ui
      run: pnpm build

    - name: Test backend setup
      working-directory: ./shadcn-ui/backend
      run: |
        npm run build --if-present
        npm test --if-present

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: shadcn-ui/dist/
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: ./dist

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # Example: rsync, scp, or cloud provider CLI commands

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: ./dist

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Example: AWS S3, Vercel, Netlify, or other hosting services

    - name: Notify deployment success
      if: success()
      run: |
        echo "âœ… Production deployment successful"
        # Add notification logic (Slack, Discord, email, etc.)